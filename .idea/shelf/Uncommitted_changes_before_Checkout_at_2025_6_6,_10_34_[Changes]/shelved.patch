Index: frontend/src/components/Sidebar.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import './Sidebar.css'; \nimport React from \"react\";\n\nexport default function Sidebar({ onNewSubmit }) {\n  return (\n    <div className=\"sidebar\">\n      {/* User Info */}\n      <div className=\"user-info\">\n        <img\n          src=\"https://randomuser.me/api/portraits/men/32.jpg\"\n          alt=\"avatar\"\n          className=\"avatar\"\n        />\n        <div className=\"username\">Sundar Gurung</div>\n        <div className=\"email\">sundar@gmail.com</div>\n      </div>\n      {/* Menu */}\n      <nav className=\"menu\">\n        <button className=\"menu-item active\">\n          <span>\uD83C\uDFE0</span> Dashboard\n        </button>\n        <div className=\"menu-item\">\n          <span>\uD83D\uDD14</span> Notification\n        </div>\n        <div className=\"menu-item\">\n          <span>\uD83D\uDCC4</span> My Submit\n        </div>\n        <button className=\"menu-item\" onClick={onNewSubmit}>\n          <span>➕</span> New Submit\n        </button>\n        <div className=\"menu-item\">\n          <span>⚙\uFE0F</span> Settings\n        </div>\n        <div className=\"menu-item\">\n          <span>❓</span> Help\n        </div>\n      </nav>\n      <div className=\"logout menu-item\">\n        <span>\uD83D\uDEAA</span> Logout\n      </div>\n    </div>\n  );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/Sidebar.jsx b/frontend/src/components/Sidebar.jsx
--- a/frontend/src/components/Sidebar.jsx	(revision 84988b53151ff9bfeb81ba8169ce9e3eed30b59f)
+++ b/frontend/src/components/Sidebar.jsx	(date 1749162707981)
@@ -1,7 +1,7 @@
 import './Sidebar.css'; 
 import React from "react";
 
-export default function Sidebar({ onNewSubmit }) {
+export default function Sidebar({ onNewSubmit , user}) {
   return (
     <div className="sidebar">
       {/* User Info */}
@@ -11,8 +11,9 @@
           alt="avatar"
           className="avatar"
         />
-        <div className="username">Sundar Gurung</div>
-        <div className="email">sundar@gmail.com</div>
+        <div className="username">{user?.name || "Unknown User"}</div>
+        <div className="email">{user?.email || "No Email"}</div>
+        <div className="role">{user?.role ? `Role: ${user.role}` : ""}</div>
       </div>
       {/* Menu */}
       <nav className="menu">
Index: frontend/src/app/page.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\n\n// app/page.tsx\nexport default function HomePage() {\n    return (\n      <main>\n        <h1>welcome</h1>\n        <p>Home</p>\n      </main>\n    );\n  }\n  
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/app/page.jsx b/frontend/src/app/page.jsx
--- a/frontend/src/app/page.jsx	(revision 84988b53151ff9bfeb81ba8169ce9e3eed30b59f)
+++ b/frontend/src/app/page.jsx	(date 1749161825503)
@@ -1,12 +1,64 @@
-import React from 'react';
+'use client';
 
-// app/page.tsx
+import React, { useState } from 'react';
+import './page.css';
+
 export default function HomePage() {
+    const [query, setQuery] = useState('');
+    const [results, setResults] = useState([]);
+    const [loading, setLoading] = useState(false);
+    const [error, setError] = useState(null);
+
+    async function handleSearch() {
+        if (!query.trim()) {
+            setResults([]);
+            return;
+        }
+
+        setLoading(true);
+        setError(null);
+
+        try {
+            const res = await fetch(`http://localhost:3005/api/submissions/search?q=${encodeURIComponent(query)}`);
+            if (!res.ok) throw new Error('Network error');
+            const data = await res.json();
+            setResults(data);
+        } catch (err) {
+            setError('Failed to fetch results');
+            setResults([]);
+        } finally {
+            setLoading(false);
+        }
+    }
+
     return (
-      <main>
-        <h1>welcome</h1>
-        <p>Home</p>
-      </main>
+        <main className="container">
+            <div className="search-box">
+                <h1>Welcome to SPEED</h1>
+                <input
+                    type="text"
+                    placeholder="Search by title, author, journal..."
+                    value={query}
+                    onChange={(e) => setQuery(e.target.value)}
+                    onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
+                />
+                <button onClick={handleSearch} disabled={loading}>
+                    {loading ? 'Searching...' : 'Search'}
+                </button>
+                {error && <p className="error">{error}</p>}
+            </div>
+
+            <div className="results">
+                {results.length > 0 && (
+                    <ul>
+                        {results.map((item) => (
+                            <li key={item._id}>
+                                <strong>{item.title}</strong> — {item.authors} ({item.journal})
+                            </li>
+                        ))}
+                    </ul>
+                )}
+            </div>
+        </main>
     );
-  }
-  
\ No newline at end of file
+}
\ No newline at end of file
Index: backend/src/submissions/submissions.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Param,\n  Patch,\n  Query,\n  BadRequestException,\n} from '@nestjs/common';\nimport { SubmissionsService } from './submissions.service';\nimport { Submission } from './submission.schema';\n\n@Controller('api/submissions')\nexport class SubmissionsController {\n  constructor(private readonly submissionsService: SubmissionsService) { }\n\n  // new submission\n  @Post()\n  async create(@Body() body: Partial<Submission>) {\n    console.log('Received data in controller:');\n    // Validate the request body\n    if (!body.title || typeof body.title !== 'string') {\n      throw new BadRequestException('Title is required and must be a string.');\n    }\n\n    if (body.year !== undefined) {\n      const yearNumber = Number(body.year);\n      if (isNaN(yearNumber)) {\n        throw new BadRequestException('Year must be a valid number.');\n      }\n    }\n\n    if (body.volume !== undefined && typeof body.volume !== 'string') {\n      throw new BadRequestException('Volume must be a string.');\n    }\n\n    if (body.number !== undefined && typeof body.number !== 'string') {\n      throw new BadRequestException('Number must be a string.');\n    }\n\n    if (body.pages !== undefined && typeof body.pages !== 'string') {\n      throw new BadRequestException('Pages must be a string.');\n    }\n\n    if (body.doi !== undefined && typeof body.doi !== 'string') {\n      throw new BadRequestException('DOI must be a string.');\n    }\n\n    if (body.authors !== undefined && typeof body.authors !== 'string') {\n      throw new BadRequestException('Authors must be a string.');\n    }\n\n    if (body.journal !== undefined && typeof body.journal !== 'string') {\n      throw new BadRequestException('Journal must be a string.');\n    }\n\n    return this.submissionsService.create(body);\n  }\n\n  // check submission duplicate\n  @Get()\n  async findAll(@Query('status') status?: string) {\n    if (status) {\n      return this.submissionsService.findByStatus(status);\n    }\n    return this.submissionsService.findAll();\n  }\n\n  // change submission status\n  @Patch(':id/status')\n  async updateStatus(@Param('id') id: string, @Body('status') status: string) {\n    if (!status || typeof status !== 'string') {\n      throw new BadRequestException('Status is required and must be a string.');\n    }\n    return this.submissionsService.updateStatus(id, status);\n  }\n\n  // search submissions\n  @Get('search')\n  async search(@Query('q') query: string): Promise<Submission[]> {\n    if (!query || typeof query !== 'string') {\n      throw new BadRequestException('Query parameter \"q\" is required and must be a string.');\n    }\n    return this.submissionsService.search(query);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/submissions/submissions.controller.ts b/backend/src/submissions/submissions.controller.ts
--- a/backend/src/submissions/submissions.controller.ts	(revision 84988b53151ff9bfeb81ba8169ce9e3eed30b59f)
+++ b/backend/src/submissions/submissions.controller.ts	(date 1749160773691)
@@ -82,6 +82,7 @@
     if (!query || typeof query !== 'string') {
       throw new BadRequestException('Query parameter "q" is required and must be a string.');
     }
-    return this.submissionsService.search(query);
+    // just return data with status='approved'
+    return this.submissionsService.search(query, 'approved');
   }
 }
Index: backend/src/submissions/submissions.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Submission } from './submission.schema';\n\n@Injectable()\nexport class SubmissionsService {\n  constructor(\n    @InjectModel(Submission.name) private submissionModel: Model<Submission>,\n  ) {}\n\n  async create(data: Partial<Submission>): Promise<Submission> {\n    console.log('Received data in service:', data);\n    const created = new this.submissionModel(data);\n    return created.save();\n  }\n\n  async findAll(): Promise<Submission[]> {\n    return this.submissionModel.find().exec();\n  }\n\n  async findByStatus(status: string): Promise<Submission[]> {\n    return this.submissionModel.find({ status }).exec();\n  }\n\n  async updateStatus(id: string, status: string): Promise<Submission> {\n    const updated = await this.submissionModel.findByIdAndUpdate(\n      id,\n      { status },\n      { new: true },\n    );\n    if (!updated) {\n      throw new Error(`Submission with id ${id} not found`);\n    }\n    return updated;\n  }\n\n  async search(query: string): Promise<Submission[]> {\n  const regex = new RegExp(query, 'i');\n\n  return this.submissionModel.find({\n    $or: [\n      { title: regex },\n      { authors: regex },\n      { journal: regex },\n      { claim: regex },\n      { evidence: regex },\n      { doi: regex }\n    ]\n  }).exec();\n}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/submissions/submissions.service.ts b/backend/src/submissions/submissions.service.ts
--- a/backend/src/submissions/submissions.service.ts	(revision 84988b53151ff9bfeb81ba8169ce9e3eed30b59f)
+++ b/backend/src/submissions/submissions.service.ts	(date 1749160970603)
@@ -35,19 +35,24 @@
     return updated;
   }
 
-  async search(query: string): Promise<Submission[]> {
-  const regex = new RegExp(query, 'i');
+  async search(query: string, status = 'approved'): Promise<Submission[]> {
+    const regex = new RegExp(query, 'i');
 
-  return this.submissionModel.find({
-    $or: [
-      { title: regex },
-      { authors: regex },
-      { journal: regex },
-      { claim: regex },
-      { evidence: regex },
-      { doi: regex }
-    ]
-  }).exec();
-}
+    const filter: any = {
+      $or: [
+        { title: regex },
+        { authors: regex },
+        { journal: regex },
+        { claim: regex },
+        { evidence: regex },
+        { doi: regex },
+      ],
+    };
+
+    if (status && status.trim().length > 0) {
+      filter.status = status;
+    }
 
+    return this.submissionModel.find(filter).exec();
+  }
 }
Index: frontend/src/app/page.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/app/page.css b/frontend/src/app/page.css
new file mode 100644
--- /dev/null	(date 1749161369615)
+++ b/frontend/src/app/page.css	(date 1749161369615)
@@ -0,0 +1,63 @@
+.container {
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    padding-top: 12vh;
+    min-height: 100vh;
+    background-color: #f4f4f4;
+    font-family: sans-serif;
+}
+
+.search-box {
+    text-align: center;
+    margin-bottom: 2rem;
+}
+
+.search-box h1 {
+    margin-bottom: 1rem;
+}
+
+.search-box input {
+    padding: 0.5rem 1rem;
+    width: 300px;
+    font-size: 1rem;
+    border: 1px solid #ccc;
+    border-radius: 5px;
+    margin-right: 0.5rem;
+}
+
+.search-box button {
+    padding: 0.5rem 1rem;
+    font-size: 1rem;
+    background-color: #0070f3;
+    color: white;
+    border: none;
+    border-radius: 5px;
+    cursor: pointer;
+}
+
+.search-box button:disabled {
+    background-color: #aaa;
+    cursor: not-allowed;
+}
+
+.results ul {
+    list-style: none;
+    padding: 0;
+}
+
+.results li {
+    background-color: white;
+    margin: 0.5rem 0;
+    padding: 1rem;
+    border-radius: 8px;
+    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
+    text-align: center;
+    width: 80vw;
+    max-width: 600px;
+}
+
+.error {
+    color: red;
+    margin-top: 0.5rem;
+}
\ No newline at end of file
